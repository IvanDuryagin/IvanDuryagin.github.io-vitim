/**
 * Оптимизированный главный JavaScript файл для проекта ВиТИМ
 * Улучшения: производительность, обработка ошибок, читаемость кода
 */

// Конфигурация для ленивой загрузки
const LAZY_LOAD_CONFIG = {
  rootMargin: '200px',
  threshold: 0.01
};

// Основная функция инициализации
document.addEventListener('DOMContentLoaded', function() {
  initMobileMenu();
  initSmoothScroll();
  initStickyHeader();
  initTeamSliderIfExists();
  initLazyLoading();
  initScrollAnimations();
});

// ===== Mobile Menu =====
function initMobileMenu() {
  try {
    const menuToggle = document.querySelector('.mobile-menu-toggle');
    const nav = document.querySelector('.nav');
    
    if (!menuToggle || !nav) return;
    
    menuToggle.addEventListener('click', function() {
      this.classList.toggle('active');
      nav.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
      
      // Добавляем ARIA-атрибуты для доступности
      const isExpanded = this.classList.contains('active');
      this.setAttribute('aria-expanded', isExpanded);
      nav.setAttribute('aria-hidden', !isExpanded);
    });
  } catch (error) {
    console.error('Mobile menu init error:', error);
  }
}

// ===== Smooth Scroll =====
function initSmoothScroll() {
  try {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        
        const targetId = this.getAttribute('href');
        if (targetId === '#' || targetId === '#!') return;
        
        const targetElement = document.querySelector(targetId);
        if (!targetElement) return;
        
        const header = document.querySelector('.header');
        const headerHeight = header ? header.offsetHeight : 0;
        const targetPosition = targetElement.getBoundingClientRect().top + 
                              window.pageYOffset - 
                              headerHeight;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
        
        // Закрываем меню если открыто
        const nav = document.querySelector('.nav');
        if (nav && nav.classList.contains('active')) {
          document.querySelector('.mobile-menu-toggle')?.classList.remove('active');
          nav.classList.remove('active');
          document.body.classList.remove('no-scroll');
        }
        
        // Обновляем URL без перезагрузки страницы
        history.pushState(null, null, targetId);
      });
    });
  } catch (error) {
    console.error('Smooth scroll init error:', error);
  }
}

// ===== Sticky Header =====
function initStickyHeader() {
  try {
    const header = document.querySelector('.header');
    if (!header) return;
    
    let lastScroll = 0;
    const scrollThreshold = 100; // Минимальный порог прокрутки
    
    window.addEventListener('scroll', function() {
      const currentScroll = window.pageYOffset;
      
      // Игнорируем мелкие прокрутки
      if (Math.abs(currentScroll - lastScroll) < 50) return;
      
      if (currentScroll <= scrollThreshold) {
        header.classList.remove('scroll-up', 'scroll-down');
        return;
      }
      
      if (currentScroll > lastScroll) {
        header.classList.remove('scroll-up');
        header.classList.add('scroll-down');
      } else {
        header.classList.remove('scroll-down');
        header.classList.add('scroll-up');
      }
      
      lastScroll = currentScroll;
    });
  } catch (error) {
    console.error('Sticky header init error:', error);
  }
}

// ===== Team Slider =====
function initTeamSliderIfExists() {
  try {
    const slider = document.querySelector('.team-slider');
    if (slider) initTeamSlider(slider);
  } catch (error) {
    console.error('Team slider init error:', error);
  }
}

function initTeamSlider(slider) {
  const slides = slider.querySelectorAll('.team-member');
  if (slides.length <= 1) return;
  
  let currentIndex = 0;
  let autoSlideInterval;
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;
  
  // Создаем навигационные точки
  const dotsContainer = document.createElement('div');
  dotsContainer.className = 'slider-dots';
  dotsContainer.setAttribute('role', 'tablist');
  
  slides.forEach((_, index) => {
    const dot = document.createElement('button');
    dot.className = 'slider-dot';
    dot.setAttribute('role', 'tab');
    dot.setAttribute('aria-label', `Перейти к слайду ${index + 1}`);
    dot.addEventListener('click', () => goToSlide(index));
    dotsContainer.appendChild(dot);
  });
  
  slider.appendChild(dotsContainer);
  const dots = slider.querySelectorAll('.slider-dot');
  
  // Добавляем кнопки навигации
  const prevBtn = createSliderButton('prev', 'Предыдущий слайд', prevSlide);
  const nextBtn = createSliderButton('next', 'Следующий слайд', nextSlide);
  slider.appendChild(prevBtn);
  slider.appendChild(nextBtn);
  
  // Touch события для мобильных устройств
  slides.forEach(slide => {
    slide.addEventListener('touchstart', touchStart);
    slide.addEventListener('touchend', touchEnd);
    slide.addEventListener('touchmove', touchMove);
  });
  
  // Функции управления слайдером
  function updateSlider() {
    slides.forEach((slide, index) => {
      slide.style.transform = `translateX(${(index - currentIndex) * 100}%)`;
      slide.setAttribute('aria-hidden', index !== currentIndex);
      slide.style.opacity = index === currentIndex ? '1' : '0.5';
    });
    
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
      dot.setAttribute('aria-selected', index === currentIndex);
    });
  }
  
  function goToSlide(index) {
    currentIndex = (index + slides.length) % slides.length;
    updateSlider();
    resetAutoSlide();
  }
  
  function nextSlide() {
    goToSlide(currentIndex + 1);
  }
  
  function prevSlide() {
    goToSlide(currentIndex - 1);
  }
  
  function startAutoSlide() {
    autoSlideInterval = setInterval(nextSlide, 5000);
  }
  
  function resetAutoSlide() {
    clearInterval(autoSlideInterval);
    startAutoSlide();
  }
  
  // Touch handlers
  function touchStart(e) {
    isDragging = true;
    startPos = e.touches[0].clientX;
    clearInterval(autoSlideInterval);
  }
  
  function touchEnd() {
    isDragging = false;
    const movedBy = currentTranslate - prevTranslate;
    
    if (movedBy < -100) nextSlide();
    if (movedBy > 100) prevSlide();
    
    startAutoSlide();
  }
  
  function touchMove(e) {
    if (!isDragging) return;
    const currentPosition = e.touches[0].clientX;
    currentTranslate = currentPosition - startPos;
  }
  
  // Инициализация
  updateSlider();
  startAutoSlide();
  
  // События
  slider.addEventListener('mouseenter', () => clearInterval(autoSlideInterval));
  slider.addEventListener('mouseleave', startAutoSlide);
  
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') prevSlide();
    if (e.key === 'ArrowRight') nextSlide();
  });
}

function createSliderButton(direction, label, handler) {
  const btn = document.createElement('button');
  btn.className = `slider-arrow ${direction}`;
  btn.innerHTML = direction === 'prev' ? '&lt;' : '&gt;';
  btn.setAttribute('aria-label', label);
  btn.addEventListener('click', handler);
  return btn;
}

// ===== Lazy Loading =====
function initLazyLoading() {
  try {
    if (!('IntersectionObserver' in window)) {
      loadAllImages();
      return;
    }
    
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    if (!lazyImages.length) return;
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src || img.src;
          observer.unobserve(img);
        }
      });
    }, LAZY_LOAD_CONFIG);
    
    lazyImages.forEach(img => observer.observe(img));
  } catch (error) {
    console.error('Lazy loading init error:', error);
  }
}

function loadAllImages() {
  document.querySelectorAll('img[loading="lazy"]').forEach(img => {
    img.src = img.dataset.src || img.src;
  });
}

// ===== Scroll Animations =====
function initScrollAnimations() {
  try {
    const animateElements = document.querySelectorAll('[data-animate]');
    if (!animateElements.length) return;
    
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animated');
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
      
      animateElements.forEach(el => observer.observe(el));
    } else {
      animateElements.forEach(el => el.classList.add('animated'));
    }
  } catch (error) {
    console.error('Scroll animations init error:', error);
  }
}
